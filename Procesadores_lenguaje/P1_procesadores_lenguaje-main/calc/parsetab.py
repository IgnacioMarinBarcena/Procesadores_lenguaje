
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "COSENO EXPONENCIAL INFINITO LOGARITMICA MEMORIA NAME NUMBER SALTO_LINEA SENO UNKNOWNstatements : statement SALTO_LINEA statements\n                  | statementstatement : \nstatement : MEMORIA '=' expression statement : expressionexpression : multiplicadormultiplicador : operandooperando : NUMBER\n                | INFINITO \n                | UNKNOWN operando : '(' expression ')'operando : '+' operando\n                | '-' operandoexpression : expression '+' multiplicador\n                  | expression '-' multiplicador multiplicador : multiplicador '*' operando\n                     | multiplicador '/' operando operando : EXPONENCIAL '(' expression ')'\n                  | LOGARITMICA '(' expression ')'\n                  | SENO '(' expression ')'\n                  | COSENO '(' expression ')' operando : MEMORIA"
    
_lr_action_items = {'SALTO_LINEA':([0,2,3,4,5,8,9,10,11,17,23,24,25,32,33,34,35,36,37,42,43,44,45,],[-3,17,-22,-5,-6,-7,-8,-9,-10,-3,-12,-22,-13,-4,-14,-15,-16,-17,-11,-18,-19,-20,-21,]),'$end':([0,1,2,3,4,5,8,9,10,11,17,23,24,25,31,32,33,34,35,36,37,42,43,44,45,],[-3,0,-2,-22,-5,-6,-7,-8,-9,-10,-3,-12,-22,-13,-1,-4,-14,-15,-16,-17,-11,-18,-19,-20,-21,]),'MEMORIA':([0,6,7,12,17,18,19,20,21,22,27,28,29,30,],[3,24,24,24,3,24,24,24,24,24,24,24,24,24,]),'NUMBER':([0,6,7,12,17,18,19,20,21,22,27,28,29,30,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'INFINITO':([0,6,7,12,17,18,19,20,21,22,27,28,29,30,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'UNKNOWN':([0,6,7,12,17,18,19,20,21,22,27,28,29,30,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'(':([0,6,7,12,13,14,15,16,17,18,19,20,21,22,27,28,29,30,],[12,12,12,12,27,28,29,30,12,12,12,12,12,12,12,12,12,12,]),'+':([0,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[6,-22,19,-6,6,6,-7,-8,-9,-10,6,6,6,6,6,6,6,-12,-22,-13,19,6,6,6,6,19,-14,-15,-16,-17,-11,19,19,19,19,-18,-19,-20,-21,]),'-':([0,3,4,5,6,7,8,9,10,11,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[7,-22,20,-6,7,7,-7,-8,-9,-10,7,7,7,7,7,7,7,-12,-22,-13,20,7,7,7,7,20,-14,-15,-16,-17,-11,20,20,20,20,-18,-19,-20,-21,]),'EXPONENCIAL':([0,6,7,12,17,18,19,20,21,22,27,28,29,30,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LOGARITMICA':([0,6,7,12,17,18,19,20,21,22,27,28,29,30,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'SENO':([0,6,7,12,17,18,19,20,21,22,27,28,29,30,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'COSENO':([0,6,7,12,17,18,19,20,21,22,27,28,29,30,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'=':([3,],[18,]),'*':([3,5,8,9,10,11,23,24,25,33,34,35,36,37,42,43,44,45,],[-22,21,-7,-8,-9,-10,-12,-22,-13,21,21,-16,-17,-11,-18,-19,-20,-21,]),'/':([3,5,8,9,10,11,23,24,25,33,34,35,36,37,42,43,44,45,],[-22,22,-7,-8,-9,-10,-12,-22,-13,22,22,-16,-17,-11,-18,-19,-20,-21,]),')':([5,8,9,10,11,23,24,25,26,33,34,35,36,37,38,39,40,41,42,43,44,45,],[-6,-7,-8,-9,-10,-12,-22,-13,37,-14,-15,-16,-17,-11,42,43,44,45,-18,-19,-20,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,17,],[1,31,]),'statement':([0,17,],[2,2,]),'expression':([0,12,17,18,27,28,29,30,],[4,26,4,32,38,39,40,41,]),'multiplicador':([0,12,17,18,19,20,27,28,29,30,],[5,5,5,5,33,34,5,5,5,5,]),'operando':([0,6,7,12,17,18,19,20,21,22,27,28,29,30,],[8,23,25,8,8,8,8,8,35,36,8,8,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement SALTO_LINEA statements','statements',3,'p_statements','calc.py',86),
  ('statements -> statement','statements',1,'p_statements','calc.py',87),
  ('statement -> <empty>','statement',0,'p_statement_salto_linea','calc.py',90),
  ('statement -> MEMORIA = expression','statement',3,'p_statement_assign','calc.py',93),
  ('statement -> expression','statement',1,'p_statement_expr','calc.py',98),
  ('expression -> multiplicador','expression',1,'p_expression_multiplicador','calc.py',103),
  ('multiplicador -> operando','multiplicador',1,'p_multiplicador','calc.py',107),
  ('operando -> NUMBER','operando',1,'p_expression_operando_number','calc.py',111),
  ('operando -> INFINITO','operando',1,'p_expression_operando_number','calc.py',112),
  ('operando -> UNKNOWN','operando',1,'p_expression_operando_number','calc.py',113),
  ('operando -> ( expression )','operando',3,'p_expression_group','calc.py',120),
  ('operando -> + operando','operando',2,'p_expression_operando_signo','calc.py',124),
  ('operando -> - operando','operando',2,'p_expression_operando_signo','calc.py',125),
  ('expression -> expression + multiplicador','expression',3,'p_expression_binop','calc.py',132),
  ('expression -> expression - multiplicador','expression',3,'p_expression_binop','calc.py',133),
  ('multiplicador -> multiplicador * operando','multiplicador',3,'p_multiplicador_operando','calc.py',156),
  ('multiplicador -> multiplicador / operando','multiplicador',3,'p_multiplicador_operando','calc.py',157),
  ('operando -> EXPONENCIAL ( expression )','operando',4,'p_operando_cient','calc.py',198),
  ('operando -> LOGARITMICA ( expression )','operando',4,'p_operando_cient','calc.py',199),
  ('operando -> SENO ( expression )','operando',4,'p_operando_cient','calc.py',200),
  ('operando -> COSENO ( expression )','operando',4,'p_operando_cient','calc.py',201),
  ('operando -> MEMORIA','operando',1,'p_operando_name','calc.py',213),
]
